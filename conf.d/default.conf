# Первый location 
server{
    # Прослушивает запросы на порт 80
    listen 80;
    # Имя сервера
    server_name dartservice.ru; 

    # location для файлов подтверждения владения доменом
    location ^~ /.well-known/acme-challenge{
        allow all;
        root /usr/share/nginx/html/letsencrypt;
    }

    # Адресация всех остальных запросов в этот location
    location / {
        # http код ответа 301 означает для клиента, что запрашиваемый
        # ресурс перемещен навсегда (браузеры запоминают такую переадресацию)
        # затем возвращаем тот же запрос но со схемой https
        return 301 https://dartservice.ru$request_uri;
        }
    # По запросу 404 отдадим пока стандартную страницу ошибки NGINX
    error_page  404              /usr/share/nginx/404.html;
}

# Второй location с SSL
server{
    # Прослушивает порт 443
    listen 443 ssl http2;
    # Имя сервера
    server_name dartservice.ru;

    # Установка заголовков переадресации с http (некоторым клиентам
    # необходимо дополнительно сообщать о необходимости изменения запроса
    # после переадресации)
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Настройки SSL, в том числе расположение сертификатов, ключей, используемые
    # схемы шифрования и алгоритмы
    server_tokens off;
    ssl_certificate /etc/nginx/ssl/live/dartservice.ru/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/dartservice.ru/privkey.pem;
    ssl_dhparam /etc/nginx/dhparam/dhparams.pem;
    
    ssl_buffer_size 8k;
    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # Направление запросов начинающихся с /api в приложение data_app
    # установка заголовков Host и X-Forwarded-For запроса
    # удаление из path запроса префикса /api, приложению в 
    # контейнере ничего не нужно знать о том в какой структуре
    # оно работает 
    location /api {
        proxy_pass http://data_app:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        rewrite ^/api(.*)$ $1 break;
    }

    # Направление запросов начинающихся с /auth в приложение auth_app
    location /auth {
        proxy_pass http://auth_app:8082;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        rewrite ^/auth(.*)$ $1 break;
    }

    # Пока только один location, раздающий статические файлы из директории /public
    location / {
        # Отключение логирования доступа к статическим файлам
        access_log off;
        # Отключение логирования ошибок доступа к статическим файлам
        error_log off;
        # Корневой папкой с файлами будет каталог /public
        root /public;
        # Файл index, возвращаемый по умолчанию, если путь запроса пустой
        index index.html;
    }
    # По запросу 404 отдадим пока стандартную страницу ошибки NGINX
    error_page  404              /usr/share/nginx/404.html;
}

